// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_null = require("bs-platform/lib/js/js_null.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");

function parseHeaders(headers) {
  return Belt_List.reduce(Belt_List.fromArray(headers.split("\n")), /* [] */0, (function (acc, s) {
                var match = Belt_List.fromArray(":".split(s));
                if (match) {
                  var match$1 = match[1];
                  if (match$1 && !match$1[1]) {
                    return /* :: */[
                            /* tuple */[
                              $$String.trim(match[0]),
                              $$String.trim(match$1[0])
                            ],
                            acc
                          ];
                  } else {
                    return acc;
                  }
                } else {
                  return acc;
                }
              }));
}

function setDefault(key, value, lst) {
  if (lst) {
    var x = lst[0];
    if (Caml_obj.caml_equal(key, x[0])) {
      return lst;
    } else {
      return /* :: */[
              x,
              setDefault(key, value, lst[1])
            ];
    }
  } else {
    return /* [] */0;
  }
}

function make(pub, userHeaders, body, url, callback) {
  var request = new XMLHttpRequest();
  request.open(pub, url);
  var headers = setDefault("Content-Type", "application/json", userHeaders);
  Belt_List.forEach(headers, (function (param) {
          request.setRequestHeader(param[1], param[0]);
          return /* () */0;
        }));
  var onReady = function () {
    var readyState = request.readyState;
    if (readyState === 4) {
      var statusText = request.statusText;
      var responseBody = request.responseText;
      var responseHeaders = parseHeaders(request.getAllResponseHeaders());
      var status = request.status;
      if (status !== 0) {
        if (status < 200 || status >= 300) {
          return Curry._1(callback, /* Error */Block.__(1, [/* BadResponse */[/* record */[
                            /* status */status,
                            /* statusText */statusText,
                            /* headers */responseHeaders,
                            /* body */responseBody
                          ]]]));
        } else {
          return Curry._1(callback, /* Ok */Block.__(0, [/* record */[
                          /* status */status,
                          /* statusText */statusText,
                          /* headers */responseHeaders,
                          /* body */responseBody
                        ]]));
        }
      } else {
        return Curry._1(callback, /* Error */Block.__(1, [/* NetworkError */1]));
      }
    } else {
      return 0;
    }
  };
  request.onreadystatechange = onReady;
  request.ontimeout = (function () {
      return Curry._1(callback, /* Error */Block.__(1, [/* Timeout */0]));
    });
  request.send(Js_null.fromOption(body));
  return /* () */0;
}

function get($staropt$star, url) {
  var headers = $staropt$star ? $staropt$star[0] : /* [] */0;
  return (function (param) {
      return make("GET", headers, /* None */0, url, param);
    });
}

function post($staropt$star, body, url) {
  var headers = $staropt$star ? $staropt$star[0] : /* [] */0;
  var partial_arg = /* Some */[body];
  return (function (param) {
      return make("POST", headers, partial_arg, url, param);
    });
}

function put($staropt$star, body, url) {
  var headers = $staropt$star ? $staropt$star[0] : /* [] */0;
  var partial_arg = /* Some */[body];
  return (function (param) {
      return make("PUT", headers, partial_arg, url, param);
    });
}

function $$delete($staropt$star, url) {
  var headers = $staropt$star ? $staropt$star[0] : /* [] */0;
  return (function (param) {
      return make("DELETE", headers, /* None */0, url, param);
    });
}

exports.get = get;
exports.post = post;
exports.put = put;
exports.$$delete = $$delete;
/* No side effect */
